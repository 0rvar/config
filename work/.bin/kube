#!/usr/local/bin/node

const child_process = require('child_process')

const shell = command => () => {
    console.log(`Running '${command}'`)
    child_process.execSync(command, { stdio: 'inherit' })
}

const getPodByIdentifier = (identifier, callback) => {
    const pods = child_process.execSync('kubectl get pods')
        .toString()
        .split('\n')
        .slice(1)
        .map(line => line.split(/ +/))
        .map(([name, _, status]) => ({ name, status }))
    const matchingPods = pods.filter(pod => pod.name.includes(identifier))
    if (matchingPods.length === 0) {
        console.error(`'${identifier}' did not match any pods`)
    } else if (matchingPods.length > 1) {
        console.error(`Ambigious identifier '${identifier}' matched all these:`)
        matchingPods.forEach(pod => console.error(`* ${pod}`))
    } else {
        const pod = matchingPods[0]
        if (pod.status != 'Running') {
            console.log(`Pod ${pod.name} not ready: ${pod.status}`)
            setTimeout(() => getPodByIdentifier(identifier, callback), 1000);
        } else {
            callback(pod.name)
        }
    }
}

const portForward = args => {
    const [identifier] = args
    getPodByIdentifier(identifier, pod => shell(`kubectl port-forward ${pod} 5005:5005`)())
}

const logs = args => {
    const [identifier, ...extraArgs] = args
    getPodByIdentifier(identifier, pod => shell(`kubectl logs ${(extraArgs || []).join(' ')} ${pod}`)())
}

const wait = args => {
    const [identifier] = args
    getPodByIdentifier(identifier, pod => console.log('Pod ready:', pod))
}

const pushToCluster = shell('gradle distDocker -Pcluster && gradle kubeDeleteDeployment kubeApplyDeployment -Pcluster')
const actions = {
    push: pushToCluster,
    pushtocluster: pushToCluster,
    ptc: pushToCluster,
    pods: shell('kubectl get pods'),
    forward: portForward,
    logs: logs,
    wait: wait,
}

const actionName = process.argv[2]
const action = actions[actionName && actionName.toLowerCase()]
if (action == null ) {
    console.error('Could not find command: ', actionName)
    console.log('Available actions:')
    Object.keys(actions).forEach(k => console.log(`* ${k}`))
    return 1
}

action(process.argv.slice(3))

