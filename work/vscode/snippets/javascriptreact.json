{
  "autobind": {
    "prefix": "autobind",
    "body": ["import autobind from 'react-autobind'"],
    "description": "react-autobind"
  },
  "##component": {
    "prefix": "##component",
    "body": [
      "// @flow",
      "",
      "import React from 'react'",
      "import autobind from 'react-autobind'",
      "",
      "type Props = {",
      "}",
      "",
      "type State = {",
      "}",
      "",
      "export default class MySweetComponent extends React.PureComponent<Props, State> {",
      "   constructor(props: Props) {",
      "      super(props)",
      "",
      "      this.state = {",
      "      }",
      "",
      "      autobind(this)",
      "   }",
      "",
      "   render() {",
      "      return (",
      "         <div className=\"my-sweet-component\">",
      "            TOO",
      "         </div>",
      "      )",
      "   }",
      "}",
      ""
    ],
    "description": "React component skeleton"
  },
  "miniumlog": {
    "prefix": "##log",
    "body": [
      "const log = (functionName: string, ...args: Array<any>) => {",
      "   const iconStyle = [",
      "      'background: url(https://www.miniumtech.com/hubfs/logo/minium-favicon.png?t=1532866574242)',",
      "      'background-size: contain',",
      "      'background-repeat: no-repeat',",
      "      'padding-right: 8px',",
      "      'height: 10px',",
      "      'margin-right: 5px',",
      "   ].join(';')",
      "   const logStyle = 'font-weight: bold;color: #999;'",
      "   console.error(`%c %cMinium::\\${functionName} » %c`, iconStyle, logStyle, 'color: black;', ...args) // eslint-disable-line no-console",
      "}",
      ""
    ],
    "description": "Pretty console.log"
  },
  "Benchmark function": {
    "prefix": "##bench",
    "body": [
      "const __benchResults: {[string]: Array<number>} = {}",
      "function bench<T>(label: string, fn: () => T): T {",
      "   const start = window.performance.now()",
      "",
      "   console.timeStamp(`\\${label} start`)",
      "   const value = fn()",
      "   console.timeStamp(`\\${label} end`)",
      "",
      "   const end = window.performance.now()",
      "   const time = end - start",
      "",
      "   const measurements = [",
      "      ...__benchResults[label] || [],",
      "      time,",
      "   ]",
      "   __benchResults[label] = measurements",
      "   const average = ms => ms.reduce((s, x) => s + x, 0) / ms.length",
      "   const lastTenMeasurements = measurements.slice(Math.max(0, measurements.length - 10))",
      "",
      "   console.log('%c%s%c %sms (%sms a*%d, %sms a*%d)', 'font-weight: bold;', label, '',",
      "      time.toFixed(1),",
      "      average(measurements).toFixed(0), measurements.length,",
      "      average(lastTenMeasurements).toFixed(0), lastTenMeasurements.length",
      "",
      "   )",
      "   return value",
      "}"
    ],
    "description": ""
  },
  "ObjDiff object changes difference": {
    "prefix": "##objdiff",
    "body": [
      "const objDiff = (object, base) => {",
      "   const _transform = require('lodash/transform') // eslint-disable-line global-require",
      "   const _isObject = require('lodash/isObject') // eslint-disable-line global-require",
      "   return _transform(object, (result, value, key) => {",
      "      if (!isEqual(value, base[key])) {",
      "         result[key] = (_isObject(value) && _isObject(base[key])) ? objDiff(value, base[key]) : value",
      "      }",
      "   })",
      "}"
    ],
    "description": "Returns deep comparison object of two objects"
  },
  "Exact Type": {
    "prefix": "#t",
    "body": ["type ${1:name} = {|", "  $0", "|}"],
    "description": "Exact Flow Type"
  },
  "IState": {
    "prefix": "#istate",
    "body": ["import { type IState } from 'redux/state'"],
    "description": "import { IState }"
  },
  "Combine props": {
    "prefix": "#combine",
    "body": ["...ExternalProps, ...StateProps, ...ActionProps"],
    "description": "...ExternalProps, ...StateProps, ...ActionProps"
  }
}
